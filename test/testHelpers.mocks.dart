// Mocks generated by Mockito 5.0.4 from annotations
// in initiative_tracker/test/testHelpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:bloc/src/bloc.dart' as _i7;
import 'package:bloc/src/transition.dart' as _i6;
import 'package:flutter/src/widgets/navigator.dart' as _i8;
import 'package:initiative_tracker/bloc/parties/parties_bloc.dart' as _i5;
import 'package:initiative_tracker/bloc/party/party_bloc.dart' as _i2;
import 'package:initiative_tracker/moor/parties_dao.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakePartyState extends _i1.Fake implements _i2.PartyState {}

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

class _FakePartiesDao extends _i1.Fake implements _i4.PartiesDao {}

class _FakePartiesState extends _i1.Fake implements _i5.PartiesState {}

/// A class which mocks [PartyBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPartyBloc extends _i1.Mock implements _i2.PartyBloc {
  MockPartyBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PartyState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakePartyState()) as _i2.PartyState);
  @override
  _i3.Stream<_i2.PartyState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.PartyState>.empty())
          as _i3.Stream<_i2.PartyState>);
  @override
  _i3.Stream<_i2.PartyState> mapEventToState(_i2.PartyEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.PartyState>.empty())
          as _i3.Stream<_i2.PartyState>);
  @override
  void add(_i2.PartyEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.PartyEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i2.PartyEvent, _i2.PartyState>> transformEvents(
          _i3.Stream<_i2.PartyEvent>? events,
          _i7.TransitionFunction<_i2.PartyEvent, _i2.PartyState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i6.Transition<_i2.PartyEvent, _i2.PartyState>>.empty())
          as _i3.Stream<_i6.Transition<_i2.PartyEvent, _i2.PartyState>>);
  @override
  void emit(_i2.PartyState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i6.Transition<_i2.PartyEvent, _i2.PartyState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i2.PartyEvent, _i2.PartyState>>
      transformTransitions(
              _i3.Stream<_i6.Transition<_i2.PartyEvent, _i2.PartyState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i6.Transition<_i2.PartyEvent, _i2.PartyState>>.empty())
              as _i3.Stream<_i6.Transition<_i2.PartyEvent, _i2.PartyState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.PartyState> listen(
          void Function(_i2.PartyState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<_i2.PartyState>())
          as _i3.StreamSubscription<_i2.PartyState>);
  @override
  void onChange(_i6.Change<_i2.PartyState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [PartiesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPartiesBloc extends _i1.Mock implements _i5.PartiesBloc {
  MockPartiesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.PartiesDao get partiesDao =>
      (super.noSuchMethod(Invocation.getter(#partiesDao),
          returnValue: _FakePartiesDao()) as _i4.PartiesDao);
  @override
  _i5.PartiesState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakePartiesState()) as _i5.PartiesState);
  @override
  _i3.Stream<_i5.PartiesState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.PartiesState>.empty())
          as _i3.Stream<_i5.PartiesState>);
  @override
  _i3.Stream<_i5.PartiesState> mapEventToState(_i5.PartiesEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i5.PartiesState>.empty())
          as _i3.Stream<_i5.PartiesState>);
  @override
  void add(_i5.PartiesEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i5.PartiesEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i5.PartiesEvent, _i5.PartiesState>> transformEvents(
          _i3.Stream<_i5.PartiesEvent>? events,
          _i7.TransitionFunction<_i5.PartiesEvent, _i5.PartiesState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i6.Transition<_i5.PartiesEvent, _i5.PartiesState>>.empty())
          as _i3.Stream<_i6.Transition<_i5.PartiesEvent, _i5.PartiesState>>);
  @override
  void emit(_i5.PartiesState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i6.Transition<_i5.PartiesEvent, _i5.PartiesState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i6.Transition<_i5.PartiesEvent, _i5.PartiesState>>
      transformTransitions(
              _i3.Stream<_i6.Transition<_i5.PartiesEvent, _i5.PartiesState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i6.Transition<_i5.PartiesEvent, _i5.PartiesState>>.empty())
              as _i3
                  .Stream<_i6.Transition<_i5.PartiesEvent, _i5.PartiesState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i5.PartiesState> listen(
          void Function(_i5.PartiesState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<_i5.PartiesState>())
          as _i3.StreamSubscription<_i5.PartiesState>);
  @override
  void onChange(_i6.Change<_i5.PartiesState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i8.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(_i8.Route<dynamic>? route, _i8.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i8.Route<dynamic>? route, _i8.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i8.Route<dynamic>? route, _i8.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i8.Route<dynamic>? newRoute, _i8.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i8.Route<dynamic>? route, _i8.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
}
